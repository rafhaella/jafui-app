package com.jafui.app.backend_jafui.entidades;

import java.util.List;
import java.util.NoSuchElementException;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.s3.AmazonS3;
import com.jafui.app.backend_jafui.negocio.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

@DynamoDBTable(tableName = "place")
public class
Place {

    private String id;
    private String name;
    private String address;
    private String description;
    private float rating;
    private List<String> photos;
    private List<String> reviews;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "createdBy-index", attributeName = "createdBy")
    private String createdBy;

    public Place() {
        super();
    }

    public Place(String id, String name, String address, String description, float rating, List<String> photos, String createdBy) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.description = description;
        this.rating = rating;
        this.photos = photos;
        this.createdBy = createdBy;
    }

    public Place(String newPlaceId) {
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "address")
    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @DynamoDBAttribute(attributeName = "description")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @DynamoDBAttribute(attributeName = "rating")
    public float getRating() {
        return rating;
    }

    public void setRating(float rating) {
        this.rating = rating;
    }

    @DynamoDBAttribute(attributeName = "photos")
    public List<String> getPhotos() {
        return photos;
    }

    public void setPhotos(List<String> photos) {
        this.photos = photos;
    }

    @DynamoDBAttribute(attributeName = "reviews")
    public List<String> getReviews() {
        return reviews;
    }

    public void setReviews(List<String> reviews) {
        this.reviews = reviews;
    }
    @DynamoDBAttribute(attributeName = "createdBy")
    public String getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }


    @Override
    public String toString() {
        return "Place{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", address='" + address + '\'' +
                ", description='" + description + '\'' +
                ", ratting='" + rating + '\'' +
                ", photos='" + photos + '\'' +
                ", reviews='" + reviews + '\'' +
                ", createdBy='" + createdBy + '\'' +
                '}';
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((address == null) ? 0 : address.hashCode());
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + Float.floatToIntBits(rating);
        result = prime * result + ((photos == null) ? 0 : photos.hashCode());
        result = prime * result + ((reviews == null) ? 0 : reviews.hashCode());
        result = prime * result + ((createdBy == null) ? 0 : createdBy.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Place other = (Place) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (address == null) {
            if (other.address != null)
                return false;
        } else if (!address.equals(other.address))
            return false;
        if (description == null) {
            if (other.description != null)
                return false;
        } else if (!description.equals(other.description))
            return false;
        if (Float.floatToIntBits(rating) != Float.floatToIntBits(other.rating))
            return false;
        if (photos == null) {
            if (other.photos != null)
                return false;
        } else if (!photos.equals(other.photos))
            return false;
        if (reviews == null) {
            if (other.reviews != null)
                return false;
        } else if (!reviews.equals(other.reviews))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        } else if (!createdBy.equals(other.createdBy))
            return false;
        return true;
    }

    public static Place findByName(List<Place> places, String name2) {
        return null;
    }

    @Autowired
    private AmazonS3 amazonS3;

    @Value("${amazon.s3.bucket-name}")
    private String bucketName;

    public String getPhotoUrl(String fileName) {
        return amazonS3.getUrl(bucketName, fileName).toString();
    }


}
